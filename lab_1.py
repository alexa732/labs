# подключаем библиотеку random
import random


# объявляем функцию input_list()
def input_list():
    # Ввод списка с клавиатуры
    # Начинаем бесконечный цикл
    # map применение функции int к каждому элементу
    # split заменяет разделителм по умолчанию (пробелы) на запятые и получаем список целых чисел
    # при некорректном вводе данных (ValueError), ввыводим предупреждение
    while True:
        try:
            data = input("Введите элементы через пробел: ")
            return list(map(int, data.split()))
        except ValueError:
            print("Некорректный ввод. Попробуйте снова:")


# объявляем функцию random_list()
def random_list():
    # Генерация случайного списка
    # Рандомом определяем размер списка
    # Возввращаем список целых чисел от 0 до 20, в пределах ранее сгенерированного размера списка
    size = random.randint(5, 9)
    return [random.randint(0, 20) for _ in range(size)]


def remove_short_odd_simple(lst):
    # Удаление коротких цепочек нечетных чисел с использованием встроенных функций
    # Создание переменной для вывода
    # Объявление перменной для индекса
    result = []
    i = 0
    # Цикл, пока индекс меньше длины списка
    while i < len(lst):
        # Если число четное, просто добавляем в результат и увеличиваем индекс
        if lst[i] % 2 == 0:
            result.append(lst[i])
            i += 1
        else:
            # В ином случае
            # Запоминаем позицию нечетного числа
            start = i
            # пока индекс меньше длины списка и число нечетное увеличиваем индекс
            # проверяем на условие, что нечетных чисел 3 или более и добавляем в результат
            # позиции от начала списка (которую мы запомнили выше) до конца (текущего индекса)
            while i < len(lst) and lst[i] % 2 != 0:
                i += 1
            if i - start >= 3:
                result.extend(lst[start:i])
    return result


def remove_short_odd_std(lst):
    # Удаление коротких цепочек нечетных чисел с подключением библиотеки
    from itertools import groupby
    # Цикл for, который перебирает группы элементов, созданные функцией groupby
    # groupby(lst, key=lambda x: x % 2) группирует последовательные элементы списка lst,
    # имеющие одинаковое значение ключа key (чётные и нечетные)
    # В данном случае, ключом является результат выражения x % 2 (0 для четных и 1 для нечетных чисел)
    # k - это ключ группы (0 или 1)
    # g - это сама группа элементов, объединенных одним ключом
    result = []
    for k, g in groupby(lst, key=lambda x: x % 2):
        group = list(g)
        if k == 0 or (k == 1 and len(group) >= 3):
            result.extend(group)
            # Проверка условий для добавления группы в результирующий список result.
            # Если k == 0, значит группа состоит из четных чисел.
            # Если k == 1, значит группа состоит из нечетных чисел.
            # В этом случае, длина группы должна быть не менее 3 элементов.
    return result


# Объявление основной функции
def main():
    # В переменную choice записываем выбор пользователя
    choice = input("Введите '1' для ввода списка или '2' для генерации: ")
    if choice == '1':
        lst = input_list()
    elif choice == '2':
        lst = random_list()
    else:
        print("Некорректный выбор. Завершение.")
        return

    print("Оригинальный список:", lst)
    new_list_simple = remove_short_odd_simple(lst)
    print("С использование встроенных функций:", new_list_simple)
    new_list_std = remove_short_odd_std(lst)
    print("С использованием дополнительных функций:", new_list_std)

# Вызов основной функции
main()
